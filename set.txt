Set

list 

list_name = [list_element1, list_element2, ...]

collection

collection_name = [
    collection_element1,
    collection_element2,
    ...
]

Set

Элементы должны быть уникальны, заключаются в фигурные скобки.
Python автоматически удаляет из множества дубликаты, оставляя лишь уникальные значения.
В памяти компьютера элементы сета хранятся в неупорядоченном виде и выводятся в случайном порядке.
К элементу сета нельзя обратиться по порядковому номеру, по индексу — ведь один и тот же индекс будет указывать то на один элемент, то на другой.

set_name {set_element1, set_element2, ...}

Преобразование списка в множество

set_name = set(list_name)

Множество можно перебирать в цикле.

Определение типа переменной

print(type(variable)


Метод(method) - разновидность функции. Применяется к объекту. Выплняет действия.
Вызывается: 
Объект_имя.метод_имя(Аргумент)

method set_name.add(value) добавляет в множество элемент.

method set_name1.union(set_name2) объединяет множества.

method set_name1.difference(set_name2) содержит элементы set_name1, которых нет в set_name2.

menhod set_name1.intersection(set_name2) содержит эдементы, которые есть в обоих множествах.


Словарь dict

Хранит информацию парами слов.
Коллекция, набор элементов, разделенных запятой.
Каждый элемент состоит из двух частей, между ними ставится двоеточие.
Первый элемент называется ключ. Второй элемент - значение.
Элементы словаря объединяются фигурными скобками.

dict_name = {key1 : value1, ...}

Доступ по ключу

variable = dict_name[key1]

Ключами словаря могут быть и числа, и строки, и даже булевы значения True или False. 
Но в словаре не может быть двух одинаковых ключей.
Именно это свойство словаря позволяет безошибочно получать доступ к каждому значению:
ключ — это уникальный адрес для доступа к значению.
Значением в словаре может быть вообще что угодно: 
числа, строки, списки и даже другие словари.
Значения словаря не обязаны быть уникальными и могут повторяться.
В любом элементе словаря можно заменить существующее значение на новое — так же,
как из ячейки шкафа можно выбросить старое содержимое и положить туда новое. 
Для замены значения нужно обратиться к элементу по ключу и присвоить ему новое значение.
Значения всех ключей можно извлечь из словаря и собрать в одну коллекцию.
Для этого у словаря есть метод values():

collection_name = dict_name.values()

Подобным образом можно получить и коллекцию ключей словаря, для этого есть метод keys():

collection_name = dict_name.keys()

Метод values() возвращает коллекцию типа dict_values(),
 а метод keys() — коллекцию типа dict_keys(). 
 Это коллекции, похожие на списки;
 их можно преобразовать в списки или в множества — и работать с ними.
 
Преобразовать в множество или в список можно не только коллекцию ключей или значений словаря, но и словарь целиком:
функция set(имя_словаря) преобразует словарь в множество;
функция list(имя_словаря) превратит словарь в список.
Но в таких преобразованиях есть особенность: множество или список, которые получатся в результате,
будут включать только ключи словаря, а значения будут проигнорированы.

Добавление одного элемента

dict_name = {dict_key1 : dict_value1}
dict_name[dict_key2] = dict_value2

если вызван существующий в словаре ключ — его значение будет заменено;
если вызван ключ, которого нет в словаре — будет создан новый элемент словаря.
Если добавить в словарь несколько элементов с одинаковыми ключами,
 но разными значениями — в словаре появится лишь один элемент с этим ключом,
 а его значением будет последнее из добавленных значений.
 
 У словарей есть метод update(), он позволяет объединить два словаря, то есть добавить в один словарь элементы другого.
 
 dict_name1 = {dict_key1 : dict_value1}
 dict_name2 = {dict_key2 : dict_value2}
 dict_name1.update(dict_name2)
 
 Словари, как и другие коллекции, можно перебрать в цикле  for...in. 
 Словари в цикле обрабатываются по тому же принципу,
 но каждый элемент словаря состоит из двух частей,
 и поэтому при объявлении цикла следует указать, что надо перебрать:
 только ключи, только значения, или и то, и другое.
 
 for dict_key, dict_value in dict_name.items():
     print(dict_key, dict_value)
	 
menhod 	dict_name.items() - извлекает из dict пары и передает их в dict_key, dict_value

Извлечение values
 
 for dict_value in dict_name.values():
     print(dict_value)
	 
Извлечение keys
 
 for dict_key in dict_name.keys():
     print(dict_key)

По умолчанию Python для итерации по словарю использует ключи.
Поэтому можно итерироваться по ключам без метода keys().

for dict_key in dict_name:
     print(dict_key)
	 
	 Списки, словари и множества в Python называются коллекции.
	 
	Проверить, есть ли в коллекции определённый элемент, можно условной конструкцией if с оператором in. 
	
collection_name = [value1, ...]

if value1 in collection_name:
	print(true)
else:
    print(false)
	
В работе с оператором in у словарей есть особенность: этот оператор проводит поиск только по ключам.
Если нужно убедиться, что определённого элемента нет в коллекции — поможет логический оператор not.

В список можно добавить новый элемент методом append(). Новый элемент будет добавлен в конец списка

list_name = [list_element1]
list_name.append(list_element2)

Добавить новый элемент в множество можно методом add(),
он работает аналогично методу append() для списков. 
Отличие лишь в том, что новый элемент будет добавлен не в конец множества 
(ведь множество не упорядочено, и у него нет начала и конца).

set_name = {set_element1}
set_name.add(set_element2)

